import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import matplotlib.ticker as ticker
from matplotlib.ticker import FuncFormatter
import matplotlib.ticker as mtick

url = "https://github.com/logangreen134/Growing-Small-Town-Nebraska-Podcast-Project/blob/cc61246c08c5759d0ddde46d29ed822c4d146b41/psam_p31.csv?raw=true"
data = pd.read_csv(url)

# Returns Household average, adjusted income in Nebraska. There are no NA values to affect the mean as version 2 returns the same number.
average_HH_Inc = np.nanmean(household_income)

# Checking that these values were the same
# average_HH_Inc_v2 = np.nanmean(np.nan_to_num(data.groupby('SERIALNO')['Individual_Adjusted_Total_Income'].sum())

median_HH_Inc = np.median(household_income)

percentile25 = np.percentile(household_income, 25)
percentile75 = np.percentile(household_income, 75)
percentile90 = np.percentile(household_income, 90)
percentile95 = np.percentile(household_income, 95)

# Removing negative incomes after finding median and average. Not sure why negatives exist in the dataset.
# Something to look into. (Average and Median were roughly the same before and after, so I'm not too worried about this.)
household_income = household_income[household_income >=0]
household_income = household_income[household_income <=400000]

# Making a graph.
# This will format the xticks.
def money_formatter(x, pos):
    return '{:}'.format(int(x / 1000))


fig, ax = plt.subplots(figsize = (9, 6))
sns.histplot(household_income.sort_values(), binwidth = 10000, kde=True, color='blue')

# This code draws vertical lines at interesting spots.
plt.axvline(x=average_HH_Inc, linestyle = "--", color = "black")
plt.text(average_HH_Inc - 3500, 3250, 'Average: $' + str(round(average_HH_Inc)), ha='center', va='bottom', rotation = 90)
plt.axvline(x=median_HH_Inc, linestyle = "--", color = "black")
plt.text(median_HH_Inc - 3500, 3250, 'Median: $' + str(round(median_HH_Inc)), ha='center', va='bottom', rotation = 90)
plt.axvline(x=percentile25, linestyle = "--", color = "black")
plt.text(percentile25 - 3500, 2500, '25th Percentile: $' + str(round(percentile25)), ha='center', va='bottom', rotation = 90)
plt.axvline(x=percentile75, linestyle = "--", color = "black")
plt.text(percentile75 - 3500, 2500, '75th Percentile: $' + str(round(percentile75)), ha='center', va='bottom', rotation = 90)
plt.axvline(x=percentile90, linestyle = "--", color = "black")
plt.text(percentile90 - 3500, 2500, '90th Percentile: $' + str(round(percentile90)), ha='center', va='bottom', rotation = 90)
plt.axvline(x=percentile95, linestyle = "--", color = "black")
plt.text(percentile95 - 3500, 2500, '95th Percentile: $' + str(round(percentile95)), ha='center', va='bottom', rotation = 90)

plt.title('Household Income Distribution')
plt.ylabel('Frequency')
plt.xlabel("Income $1000s USD")
ax.xaxis.set_major_formatter(FuncFormatter(money_formatter))
ax.xaxis.set_major_locator(ticker.MultipleLocator(50000))
ax.xaxis.set_minor_locator(ticker.AutoMinorLocator(5))
plt.grid(axis='y', linestyle='--')
plt.xlim(0, 400000)
fig.tight_layout()

plt.show()


interpreter = {1:"No schooling completed",	2:"Nursery school, preschool",	3:"Kindergarten",	4:"Grade 1",	5:"Grade 2",	6:"Grade 3",	7:"Grade 4",	8:"Grade 5",	9:"Grade 6",	10:"Grade 7",	11:"Grade 8",	12:"Grade 9",	13:"Grade 10",	14:"Grade 11",	15:"12th grade - no diploma",	16:"Regular high school diploma",	17:"GED or alternative credential",	18:"Some college, but less than 1 year",	19:"1 or more years of college credit, no degree",	20:"Associate's degree",	21:"Bachelor's degree",	22:"Master's degree",	23:"Professional degree beyond a bachelor's degree",	24:"Doctorate degree", np.nan: np.nan}
tempdata = data[data['AGEP'] >= 18]["SCHL"].sort_values().map(interpreter).value_counts(sort = False)

figs, axes = plt.subplots(1, figsize = (5,6))
figs.suptitle("Distribution of Educational Attainment in Nebraska (18 and Older)")
ax1 = tempdata.plot(kind = 'barh', ax = axes, width = 1, edgecolor = "black", ylabel = '')
for container in ax1.containers:
    ax1.bar_label(container, padding = 2)
ax1.spines['top'].set_visible(False)
ax1.spines['right'].set_visible(False)
ax1.spines['left'].set_visible(False)
ax1.spines['bottom'].set_color('#DDDDDD')
ax1.tick_params(bottom=False, left=False)
ax1.set_axisbelow(True)
ax1.xaxis.grid(True, color='#EEEEEE')
ax1.yaxis.grid(False)
ax1.xaxis.set_major_formatter(mtick.PercentFormatter(xmax = tempdata.sum()))
plt.show()  

interpreter = {1:"Employee of a private for-profit company or business, or of an individual, for wages, salary, or commissions",	2:"Employee of a private not-for-profit, tax-exempt, or charitable organization",	3:"Local government employee (city, county, etc.)",	4:"State government employee",	5:"Federal government employee",	6:"Self-employed in own not incorporated business, professional practice, or farm",	7:"Self-employed in own incorporated business, professional practice or farm",	8:"Working without pay in family business or farm",	9:"Unemployed and last worked 5 years ago or earlier or never worked", np.nan:"Out of Universe"}
tempdata = data[data['AGEP'] >= 18]["COW"].sort_values().map(interpreter).value_counts(sort = False, dropna=False)

figs, axes = plt.subplots(1, figsize = (5,6))
figs.suptitle("Distribution of Worker Type in Nebraska (18 and Older)")
ax1 = tempdata.plot(kind = 'barh', ax = axes, width = 1, edgecolor = "black", ylabel = '')
for container in ax1.containers:
    ax1.bar_label(container, padding = 2)
ax1.spines['top'].set_visible(False)
ax1.spines['right'].set_visible(False)
ax1.spines['left'].set_visible(False)
ax1.spines['bottom'].set_color('#DDDDDD')
ax1.tick_params(bottom=False, left=False)
ax1.set_axisbelow(True)
ax1.xaxis.grid(True, color='#EEEEEE')
ax1.yaxis.grid(False)
ax1.xaxis.set_major_formatter(mtick.PercentFormatter(xmax = tempdata.sum()))
plt.show() 

interpreter = {1:"Employee of a private for-profit company or business, or of an individual, for wages, salary, or commissions",	2:"Employee of a private not-for-profit, tax-exempt, or charitable organization",	3:"Local government employee (city, county, etc.)",	4:"State government employee",	5:"Federal government employee",	6:"Self-employed in own not incorporated business, professional practice, or farm",	7:"Self-employed in own incorporated business, professional practice or farm",	8:"Working without pay in family business or farm",	9:"Unemployed and last worked 5 years ago or earlier or never worked", np.nan:"Out of Universe"}
tempdata = data[data['AGEP'] >= 18]["COW"].sort_values().map(interpreter).value_counts(sort = False, dropna=False)


interpreter = {1100:"General Agriculture",	1101:"Agriculture Production And Management",	1102:"Agricultural Economics",	1103:"Animal Sciences",	1104:"Food Science",	1105:"Plant Science And Agronomy",	1106:"Soil Science",	1199:"Miscellaneous Agriculture",	1301:"Environmental Science",	1302:"Forestry",	1303:"Natural Resources Management",	1401:"Architecture",	1501:"Area Ethnic And Civilization Studies",	1901:"Communications",	1902:"Journalism",	1903:"Mass Media",	1904:"Advertising And Public Relations",	2001:"Communication Technologies",	2100:"Computer And Information Systems",	2101:"Computer Programming And Data Processing",	2102:"Computer Science",	2105:"Information Sciences",	2106:"Computer Administration Management And Security",	2107:"Computer Networking And Telecommunications",	2201:"Cosmetology Services And Culinary Arts",	2300:"General Education",	2301:"Educational Administration And Supervision",	2303:"School Student Counseling",	2304:"Elementary Education",	2305:"Mathematics Teacher Education",	2306:"Physical And Health Education Teaching",	2307:"Early Childhood Education",	2308:"Science And Computer Teacher Education",	2309:"Secondary Teacher Education",	2310:"Special Needs Education",	2311:"Social Science Or History Teacher Education",	2312:"Teacher Education: Multiple Levels",	2313:"Language And Drama Education",	2314:"Art And Music Education",	2399:"Miscellaneous Education",	2400:"General Engineering",	2401:"Aerospace Engineering",	2402:"Biological Engineering",	2403:"Architectural Engineering",	2404:"Biomedical Engineering",	2405:"Chemical Engineering",	2406:"Civil Engineering",	2407:"Computer Engineering",	2408:"Electrical Engineering",	2409:"Engineering Mechanics Physics And Science",	2410:"Environmental Engineering",	2411:"Geological And Geophysical Engineering",	2412:"Industrial And Manufacturing Engineering",	2413:"Materials Engineering And Materials Science",	2414:"Mechanical Engineering",	2415:"Metallurgical Engineering",	2416:"Mining And Mineral Engineering",	2417:"Naval Architecture And Marine Engineering",	2418:"Nuclear Engineering",	2419:"Petroleum Engineering",	2499:"Miscellaneous Engineering",	2500:"Engineering Technologies",	2501:"Engineering And Industrial Management",	2502:"Electrical Engineering Technology",	2503:"Industrial Production Technologies",	2504:"Mechanical Engineering Related Technologies",	2599:"Miscellaneous Engineering Technologies",	2601:"Linguistics And Comparative Language And Literature",	2602:"French German Latin And Other Common Foreign Language Studies",	2603:"Other Foreign Languages",	2901:"Family And Consumer Sciences",	3202:"Pre-Law And Legal Studies",	3301:"English Language And Literature",	3302:"Composition And Rhetoric",	3401:"Liberal Arts",	3402:"Humanities",	3501:"Library Science",	3600:"Biology",	3601:"Biochemical Sciences",	3602:"Botany",	3603:"Molecular Biology",	3604:"Ecology",	3605:"Genetics",	3606:"Microbiology",	3607:"Pharmacology",	3608:"Physiology",	3609:"Zoology",	3611:"Neuroscience",	3699:"Miscellaneous Biology",	3700:"Mathematics",	3701:"Applied Mathematics",	3702:"Statistics And Decision Science",	3801:"Military Technologies",	4000:"Multi/Interdisciplinary Studies",	4001:"Intercultural And International Studies",	4002:"Nutrition Sciences",	4005:"Mathematics And Computer Science",	4006:"Cognitive Science And Biopsychology",	4007:"Interdisciplinary Social Sciences",	4101:"Physical Fitness Parks Recreation And Leisure",	4801:"Philosophy And Religious Studies",	4901:"Theology And Religious Vocations",	5000:"Physical Sciences",	5001:"Astronomy And Astrophysics",	5002:"Atmospheric Sciences And Meteorology",	5003:"Chemistry",	5004:"Geology And Earth Science",	5005:"Geosciences",	5006:"Oceanography",	5007:"Physics",	5008:"Materials Science",	5098:"Multi-Disciplinary Or General Science",	5102:"Nuclear, Industrial Radiology, And Biological Technologies",	5200:"Psychology",	5201:"Educational Psychology",	5202:"Clinical Psychology",	5203:"Counseling Psychology",	5205:"Industrial And Organizational Psychology",	5206:"Social Psychology",	5299:"Miscellaneous Psychology",	5301:"Criminal Justice And Fire Protection",	5401:"Public Administration",	5402:"Public Policy",	5403:"Human Services And Community Organization",	5404:"Social Work",	5500:"General Social Sciences",	5501:"Economics",	5502:"Anthropology And Archeology",	5503:"Criminology",	5504:"Geography",	5505:"International Relations",	5506:"Political Science And Government",	5507:"Sociology",	5599:"Miscellaneous Social Sciences",	5601:"Construction Services",	5701:"Electrical, Mechanical, And Precision Technologies And Production",	5901:"Transportation Sciences And Technologies",	6000:"Fine Arts",	6001:"Drama And Theater Arts",	6002:"Music",	6003:"Visual And Performing Arts",	6004:"Commercial Art And Graphic Design",	6005:"Film Video And Photographic Arts",	6006:"Art History And Criticism",	6007:"Studio Arts",	6099:"Miscellaneous Fine Arts",	6100:"General Medical And Health Services",	6102:"Communication Disorders Sciences And Services",	6103:"Health And Medical Administrative Services",	6104:"Medical Assisting Services",	6105:"Medical Technologies Technicians",	6106:"Health And Medical Preparatory Programs",	6107:"Nursing",	6108:"Pharmacy Pharmaceutical Sciences And Administration",	6109:"Treatment Therapy Professions",	6110:"Community And Public Health",	6199:"Miscellaneous Health Medical Professions",	6200:"General Business",	6201:"Accounting",	6202:"Actuarial Science",	6203:"Business Management And Administration",	6204:"Operations Logistics And E-Commerce",	6205:"Business Economics",	6206:"Marketing And Marketing Research",	6207:"Finance",	6209:"Human Resources And Personnel Management",	6210:"International Business",	6211:"Hospitality Management",	6212:"Management Information Systems And Statistics",	6299:"Miscellaneous Business and Medical Administration",	6402:"History",	6403:"United States History"}
tempdata = (data[data['AGEP'] >= 18]["FOD1P"].sort_values().map(interpreter).value_counts() + data[data['AGEP'] >= 18]["FOD2P"].sort_values().map(interpreter).value_counts())
tempdatalargest = tempdata.nlargest(20)

figs, axes = plt.subplots(1, figsize = (5,6))
figs.suptitle("Top 20 Degrees in Nebraska (18 and Older)")
ax1 = tempdatalargest.plot(kind = 'barh', ax = axes, width = 1, edgecolor = "black", ylabel = '')
for container in ax1.containers:
    ax1.bar_label(container, padding = 2)
ax1.spines['top'].set_visible(False)
ax1.spines['right'].set_visible(False)
ax1.spines['left'].set_visible(False)
ax1.spines['bottom'].set_color('#DDDDDD')
ax1.tick_params(bottom=False, left=False)
ax1.set_axisbelow(True)
ax1.xaxis.grid(True, color='#EEEEEE')
ax1.yaxis.grid(False)
ax1.xaxis.set_major_formatter(mtick.PercentFormatter(xmax = tempdata.sum()))
plt.show() 

interpreter = {1:"Alabama/AL",	2:"Alaska/AK",	4:"Arizona/AZ",	5:"Arkansas/AR",	6:"California/CA",	8:"Colorado/CO",	9:"Connecticut/CT",	10:"Delaware/DE",	11:"District of Columbia/DC",	12:"Florida/FL",	13:"Georgia/GA",	15:"Hawaii/HI",	16:"Idaho/ID",	17:"Illinois/IL",	18:"Indiana/IN",	19:"Iowa/IA",	20:"Kansas/KS",	21:"Kentucky/KY",	22:"Louisiana/LA",	23:"Maine/ME",	24:"Maryland/MD",	25:"Massachusetts/MA",	26:"Michigan/MI",	27:"Minnesota/MN",	28:"Mississippi/MS",	29:"Missouri/MO",	30:"Montana/MT",	31:"Nebraska/NE",	32:"Nevada/NV",	33:"New Hampshire/NH",	34:"New Jersey/NJ",	35:"New Mexico/NM",	36:"New York/NY",	37:"North Carolina/NC",	38:"North Dakota/ND",	39:"Ohio/OH",	40:"Oklahoma/OK",	41:"Oregon/OR",	42:"Pennsylvania/PA",	44:"Rhode Island/RI",	45:"South Carolina/SC",	46:"South Dakota/SD",	47:"Tennessee/TN",	48:"Texas/TX",	49:"Utah/UT",	50:"Vermont/VT",	51:"Virginia/VA",	53:"Washington/WA",	54:"West Virginia/WV",	55:"Wisconsin/WI",	56:"Wyoming/WY",	60:"American Samoa",	66:"Guam",	69:"Commonwealth of the Northern Mariana Islands",	72:"Puerto Rico",	78:"US Virgin Islands",	100:"Albania",	102:"Austria",	103:"Belgium",	104:"Bulgaria",	105:"Czechoslovakia",	106:"Denmark",	108:"Finland",	109:"France",	110:"Germany",	116:"Greece",	117:"Hungary",	118:"Iceland",	119:"Ireland",	120:"Italy",	126:"Netherlands",	127:"Norway",	128:"Poland",	129:"Portugal",	130:"Azores Islands",	132:"Romania",	134:"Spain",	136:"Sweden",	137:"Switzerland",	138:"United Kingdom, Not Specified",	139:"England",	140:"Scotland",	142:"Northern Ireland",	147:"Yugoslavia",	148:"Czech Republic",	149:"Slovakia",	150:"Bosnia and Herzegovina",	151:"Croatia",	152:"Macedonia",	154:"Serbia",	156:"Latvia",	157:"Lithuania",	158:"Armenia",	159:"Azerbaijan",	160:"Belarus",	161:"Georgia",	162:"Moldova",	163:"Russia",	164:"Ukraine",	165:"USSR",	166:"Europe",	167:"Kosovo",	168:"Montenegro",	169:"Other Europe, Not Specified",	200:"Afghanistan",	202:"Bangladesh",	203:"Bhutan",	205:"Myanmar",	206:"Cambodia",	207:"China",	208:"Cyprus",	209:"Hong Kong",	210:"India",	211:"Indonesia",	212:"Iran",	213:"Iraq",	214:"Israel",	215:"Japan",	216:"Jordan",	217:"Korea",	218:"Kazakhstan",	219:"Kyrgyzstan",	222:"Kuwait",	223:"Laos",	224:"Lebanon",	226:"Malaysia",	228:"Mongolia",	229:"Nepal",	231:"Pakistan",	233:"Philippines",	235:"Saudi Arabia",	236:"Singapore",	238:"Sri Lanka",	239:"Syria",	240:"Taiwan",	242:"Thailand",	243:"Turkey",	245:"United Arab Emirates",	246:"Uzbekistan",	247:"Vietnam",	248:"Yemen",	249:"Asia",	253:"South Central Asia, Not Specified",	254:"Other Asia, Not Specified",	300:"Bermuda",	301:"Canada",	303:"Mexico",	310:"Belize",	311:"Costa Rica",	312:"El Salvador",	313:"Guatemala",	314:"Honduras",	315:"Nicaragua",	316:"Panama",	321:"Antigua and Barbuda",	323:"Bahamas",	324:"Barbados",	327:"Cuba",	328:"Dominica",	329:"Dominican Republic",	330:"Grenada",	332:"Haiti",	333:"Jamaica",	338:"St. Kitts-Nevis",	339:"St. Lucia",	340:"St. Vincent and the Grenadines",	341:"Trinidad and Tobago",	343:"West Indies",	344:"Caribbean, Not Specified",	360:"Argentina",	361:"Bolivia",	362:"Brazil",	363:"Chile",	364:"Colombia",	365:"Ecuador",	368:"Guyana",	369:"Paraguay",	370:"Peru",	372:"Uruguay",	373:"Venezuela",	374:"South America",	399:"Americas, Not Specified",	400:"Algeria",	407:"Cameroon",	408:"Cabo Verde",	412:"Congo",	414:"Egypt",	416:"Ethiopia",	417:"Eritrea",	420:"Gambia",	421:"Ghana",	423:"Guinea",	425:"Ivory Coast",	427:"Kenya",	429:"Liberia",	430:"Libya",	436:"Morocco",	440:"Nigeria",	442:"Rwanda",	444:"Senegal",	447:"Sierra Leone",	448:"Somalia",	449:"South Africa",	451:"Sudan",	453:"Tanzania",	454:"Togo",	457:"Uganda",	459:"Democratic Republic of Congo (Zaire)",	460:"Zambia",	461:"Zimbabwe",	462:"Africa",	463:"South Sudan",	464:"Northern Africa, Not Specified",	467:"Western Africa, Not Specified",	468:"Other Africa, Not Specified",	469:"Eastern Africa, Not Specified",	501:"Australia",	508:"Fiji",	511:"Marshall Islands",	512:"Micronesia",	515:"New Zealand",	523:"Tonga",	527:"Samoa",	554:"Other US Island Areas, Oceania, Not Specified, or at Sea"}
tempdata = data[data['AGEP'] >= 18]["POBP"].sort_values().map(interpreter).value_counts(sort = False, dropna=False)
tempdatalargest = tempdata.nlargest(20)

figs, axes = plt.subplots(1, figsize = (5,6))
figs.suptitle("Top 20 Places of Birth of Nebraskans (18 and Older)")
ax1 = tempdatalargest.plot(kind = 'barh', ax = axes, width = 1, edgecolor = "black", ylabel = '')
for container in ax1.containers:
    ax1.bar_label(container, padding = 2)
ax1.spines['top'].set_visible(False)
ax1.spines['right'].set_visible(False)
ax1.spines['left'].set_visible(False)
ax1.spines['bottom'].set_color('#DDDDDD')
ax1.tick_params(bottom=False, left=False)
ax1.set_axisbelow(True)
ax1.xaxis.grid(True, color='#EEEEEE')
ax1.yaxis.grid(False)
ax1.xaxis.set_major_formatter(mtick.PercentFormatter(xmax = tempdata.sum()))
plt.show() 


interpreter = {1:"Yes, same house (nonmovers)",	2:"No, outside US and Puerto Rico",	3:"No, different house in US or Puerto Rico", np.nan: "N/A (less than 1 year old)"}
tempdata = data[data['AGEP'] >= 18]["MIG"].sort_values().map(interpreter).value_counts(sort = False, dropna=False)

figs, axes = plt.subplots(1, figsize = (5,6))
figs.suptitle("Mobility Status of Nebraskans (18 and Older)- Lived in same house one year ago?")
ax1 = tempdata.plot(kind = 'barh', ax = axes, width = 1, edgecolor = "black", ylabel = '')
for container in ax1.containers:
    ax1.bar_label(container, padding = 2)
ax1.spines['top'].set_visible(False)
ax1.spines['right'].set_visible(False)
ax1.spines['left'].set_visible(False)
ax1.spines['bottom'].set_color('#DDDDDD')
ax1.tick_params(bottom=False, left=False)
ax1.set_axisbelow(True)
ax1.xaxis.grid(True, color='#EEEEEE')
ax1.yaxis.grid(False)
ax1.xaxis.set_major_formatter(mtick.PercentFormatter(xmax = tempdata.sum()))
plt.show() 
